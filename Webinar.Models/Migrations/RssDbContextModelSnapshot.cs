// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Webinar.Models;

namespace Aptex.Models.Migrations
{
    [DbContext(typeof(RssDbContext))]
    partial class RssDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RssSata.Models.spDocumentMainBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnName("css_class")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnName("site")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_sp_document_main_blocks");

                    b.ToTable("sp_document_main_blocks");
                });

            modelBuilder.Entity("RssSata.Models.spKeyPhrase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sp_key_phrases");

                    b.ToTable("sp_key_phrases");
                });

            modelBuilder.Entity("RssSata.Models.spLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sp_languages");

                    b.ToTable("sp_languages");
                });

            modelBuilder.Entity("RssSata.Models.spNewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("MainId")
                        .HasColumnName("main_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sp_news_categores");

                    b.ToTable("sp_news_categores");
                });

            modelBuilder.Entity("RssSata.Models.spOnlinePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sp_online_payments");

                    b.ToTable("sp_online_payments");
                });

            modelBuilder.Entity("RssSata.Models.tbBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BalanceSumma")
                        .HasColumnName("balance_summa")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPayed")
                        .HasColumnName("is_payed")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_billings");

                    b.ToTable("tb_billings");
                });

            modelBuilder.Entity("RssSata.Models.tbFeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("HtmlUrl")
                        .HasColumnName("html_url")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("NewsCategoryId")
                        .HasColumnName("news_category_id")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonalCategoryId")
                        .HasColumnName("personal_category_id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<int>("V1")
                        .HasColumnName("v1")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasColumnType("text");

                    b.Property<string>("XmlUrl")
                        .HasColumnName("xml_url")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_tb_feeds");

                    b.HasIndex("LanguageId")
                        .HasName("ix_tb_feeds_language_id");

                    b.HasIndex("NewsCategoryId")
                        .HasName("ix_tb_feeds_news_category_id");

                    b.HasIndex("PersonalCategoryId")
                        .HasName("ix_tb_feeds_personal_category_id");

                    b.ToTable("tb_feeds");
                });

            modelBuilder.Entity("RssSata.Models.tbFeedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("FeedId")
                        .HasColumnName("feed_id")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsMarkAsRead")
                        .HasColumnName("is_mark_as_read")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnName("publishing_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("tbReadLaterId")
                        .HasColumnName("tb_read_later_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_feed_items");

                    b.HasIndex("FeedId")
                        .HasName("ix_tb_feed_items_feed_id");

                    b.HasIndex("tbReadLaterId")
                        .HasName("ix_tb_feed_items_tb_read_later_id");

                    b.ToTable("tb_feed_items");
                });

            modelBuilder.Entity("RssSata.Models.tbLastPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("OnlinePaymentId")
                        .HasColumnName("online_payment_id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Summa")
                        .HasColumnName("summa")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<int?>("tbBillingId")
                        .HasColumnName("tb_billing_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_last_payments");

                    b.HasIndex("OnlinePaymentId")
                        .HasName("ix_tb_last_payments_online_payment_id");

                    b.HasIndex("tbBillingId")
                        .HasName("ix_tb_last_payments_tb_billing_id");

                    b.ToTable("tb_last_payments");
                });

            modelBuilder.Entity("RssSata.Models.tbNewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("NewsCategoryId")
                        .HasColumnName("news_category_id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<int>("tbFeedItemId")
                        .HasColumnName("tb_feed_item_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_news_categories");

                    b.HasIndex("NewsCategoryId")
                        .HasName("ix_tb_news_categories_news_category_id");

                    b.HasIndex("tbFeedItemId")
                        .HasName("ix_tb_news_categories_tb_feed_item_id");

                    b.ToTable("tb_news_categories");
                });

            modelBuilder.Entity("RssSata.Models.tbPersonalCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_personal_categories");

                    b.ToTable("tb_personal_categories");
                });

            modelBuilder.Entity("RssSata.Models.tbReadLater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_read_laters");

                    b.ToTable("tb_read_laters");
                });

            modelBuilder.Entity("RssSata.Models.tbRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<bool>("Label")
                        .HasColumnName("label")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id")
                        .HasColumnType("integer");

                    b.Property<int>("NewsCategoryId")
                        .HasColumnName("news_category_id")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnName("score")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_recommendations");

                    b.HasIndex("LanguageId")
                        .HasName("ix_tb_recommendations_language_id");

                    b.HasIndex("NewsCategoryId")
                        .HasName("ix_tb_recommendations_news_category_id");

                    b.ToTable("tb_recommendations");
                });

            modelBuilder.Entity("RssSata.Models.tbSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Background")
                        .HasColumnName("background")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("FontName")
                        .HasColumnName("font_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FontSize")
                        .HasColumnName("font_size")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsTranslate")
                        .HasColumnName("is_translate")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("TextColor")
                        .HasColumnName("text_color")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TextToSpeech")
                        .HasColumnName("text_to_speech")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslateServer")
                        .HasColumnName("translate_server")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslateToLang")
                        .HasColumnName("translate_to_lang")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tb_setups");

                    b.ToTable("tb_setups");
                });

            modelBuilder.Entity("RssSata.Models.tbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUser")
                        .HasColumnName("create_user")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("pk_tb_users");

                    b.ToTable("tb_users");
                });

            modelBuilder.Entity("RssSata.Models.tbFeed", b =>
                {
                    b.HasOne("RssSata.Models.spLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("fk_tb_feeds_sp_languages_language_id");

                    b.HasOne("RssSata.Models.tbNewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .HasConstraintName("fk_tb_feeds_tb_news_categories_news_category_id");

                    b.HasOne("RssSata.Models.tbPersonalCategory", "PersonalCategory")
                        .WithMany("Feeds")
                        .HasForeignKey("PersonalCategoryId")
                        .HasConstraintName("fk_tb_feeds_tb_personal_categories_personal_category_id");
                });

            modelBuilder.Entity("RssSata.Models.tbFeedItem", b =>
                {
                    b.HasOne("RssSata.Models.tbFeed", "Feed")
                        .WithMany("FeedItems")
                        .HasForeignKey("FeedId")
                        .HasConstraintName("fk_tb_feed_items_tb_feeds_feed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RssSata.Models.tbReadLater", null)
                        .WithMany("FeedItems")
                        .HasForeignKey("tbReadLaterId")
                        .HasConstraintName("fk_tb_feed_items_tb_read_laters_tb_read_later_id");
                });

            modelBuilder.Entity("RssSata.Models.tbLastPayment", b =>
                {
                    b.HasOne("RssSata.Models.spOnlinePayment", "OnlinePayment")
                        .WithMany()
                        .HasForeignKey("OnlinePaymentId")
                        .HasConstraintName("fk_tb_last_payments_sp_online_payments_online_payment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RssSata.Models.tbBilling", null)
                        .WithMany("Payments")
                        .HasForeignKey("tbBillingId")
                        .HasConstraintName("fk_tb_last_payments_tb_billings_tb_billing_id");
                });

            modelBuilder.Entity("RssSata.Models.tbNewsCategory", b =>
                {
                    b.HasOne("RssSata.Models.spNewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .HasConstraintName("fk_tb_news_categories_sp_news_categores_news_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RssSata.Models.tbFeedItem", "FeedItem")
                        .WithMany()
                        .HasForeignKey("tbFeedItemId")
                        .HasConstraintName("fk_tb_news_categories_tb_feed_items_tb_feed_item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RssSata.Models.tbRecommendation", b =>
                {
                    b.HasOne("RssSata.Models.spLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("fk_tb_recommendations_sp_languages_language_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RssSata.Models.tbNewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .HasConstraintName("fk_tb_recommendations_tb_news_categories_news_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
